generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  fullName          String
  password          String
  role              String   @default("CUSTOMER")
  age               Int?
  gender            String?
  sexualPreferences String?
  religion          String?
  heardAboutUs      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  // Relationships
  customer      Customer?
  userLanguages UserLanguage[]
  userCultures  UserCulture[]
}

model Customer {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id])
  dob            DateTime?
  timezone       String?
  mentalHealth   String?
  physicalHealth String?

  // Relationships for the arrays we previously had
  reasons                 CustomerReason[]
  preferences             CustomerPreference[]
  concerns                CustomerConcern[]
  bookings                Booking[]
  customerNeedSpecialties CustomerNeedSpecialty[]
}

// New models to replace the String[] fields
model CustomerReason {
  id         Int      @id @default(autoincrement())
  customerId Int
  reason     String
  customer   Customer @relation(fields: [customerId], references: [id])
}

model CustomerPreference {
  id         Int      @id @default(autoincrement())
  customerId Int
  preference String
  customer   Customer @relation(fields: [customerId], references: [id])
}

model CustomerConcern {
  id         Int      @id @default(autoincrement())
  customerId Int
  concern    String
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Language {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  userLanguages UserLanguage[]
}

model UserLanguage {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  languageId Int
  language   Language @relation(fields: [languageId], references: [id])
}

model Culture {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  userCultures UserCulture[]
}

model UserCulture {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  cultureId Int
  culture   Culture @relation(fields: [cultureId], references: [id])
}

model Specialty {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  description             String?
  customerNeedSpecialties CustomerNeedSpecialty[]
}

model CustomerNeedSpecialty {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  specialtyId Int
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
}

model Booking {
  id            Int      @id @default(autoincrement())
  customerId    Int
  sessionFormat String
  startTime     DateTime
  endTime       DateTime
  customer      Customer @relation(fields: [customerId], references: [id])
}
